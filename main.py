import telebot
import config
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

bot = telebot.TeleBot(config.TOKEN)

@bot.message_handler(commands=['start'])
def greet_user(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø Victor! –ú–æ–≥—É —Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ —Ç–≤–æ–∏–º –¥–∞–Ω–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å.", reply_markup=build_keyboard())

def build_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    graph_button = telebot.types.KeyboardButton(text='–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É')
    pie_chart_button = telebot.types.KeyboardButton(text='–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É')
    line_graph_button = telebot.types.KeyboardButton(text='–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫')
    scatter_button = telebot.types.KeyboardButton(text='–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ—á–µ—á–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É')
    keyboard.add(graph_button, pie_chart_button, line_graph_button,scatter_button)
    return keyboard

def build_inlinekeyboard():
    markup_inline = telebot.types.InlineKeyboardMarkup()
    item_example = telebot.types.InlineKeyboardButton(text='–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞', callback_data='example')
    markup_inline.add(item_example)
    return markup_inline

def build_inlinekeyboard_scatter_button():
    markup_inline = telebot.types.InlineKeyboardMarkup()
    item_example = telebot.types.InlineKeyboardButton(text='–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞', callback_data='example_scatter')
    markup_inline.add(item_example)
    return markup_inline

@bot.callback_query_handler(func=lambda call: call.data == 'example')
def callback_query(call: CallbackQuery):
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, '–ü—Ä–∏–º–µ—Ä:\n\n20, 30, 50; –ù–∞–∑–≤–∞–Ω–∏–µ 1, –ù–∞–∑–≤–∞–Ω–∏–µ 2, –ù–∞–∑–≤–∞–Ω–∏–µ 3; –ò–º—è –≥—Ä–∞—Ñ–∏–∫–∞\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–∞–∑–≤–∞–Ω–∏–π.\n–ù–µ –∑–∞–±—ã–≤–∞–π —Ä–∞—Å—Å—Ç–∞–≤–ª—è—Ç—å –∑–Ω–∞–∫–∏( , –∏ ; ) –∏ —É–∫–∞–∑—ã–≤–∞—Ç—å –∏–º—è –≥—Ä–∞—Ñ–∏–∫–∞!')
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data == 'example_scatter')
def callback_query_scatter_button(call: CallbackQuery):
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, '–ü—Ä–∏–º–µ—Ä:\n\n20, 30, 50; 30, 50, 20; –ò–º—è –≥—Ä–∞—Ñ–∏–∫–∞\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –æ—Å–∏ X —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –æ—Å–∏ Y.\n–ù–µ –∑–∞–±—ã–≤–∞–π —Ä–∞—Å—Å—Ç–∞–≤–ª—è—Ç—å –∑–Ω–∞–∫–∏( , –∏ ; ) –∏ —É–∫–∞–∑—ã–≤–∞—Ç—å –∏–º—è –≥—Ä–∞—Ñ–∏–∫–∞!')
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.text == '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏—è üë®üèº‚Äçüè´', reply_markup=build_inlinekeyboard())
        bot.register_next_step_handler(message, build_graph)
    elif message.text == '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏—è üë®üèº‚Äçüíª', reply_markup=build_inlinekeyboard())
        bot.register_next_step_handler(message, build_pie_chart)
    elif message.text == '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏—è üë®üèº‚Äçüè´', reply_markup=build_inlinekeyboard())
        bot.register_next_step_handler(message, build_line_graph)
    elif message.text == '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ—á–µ—á–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏—è üë®üèº‚Äçüíª', reply_markup=build_inlinekeyboard_scatter_button())
        bot.register_next_step_handler(message, build_scatter)
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å", reply_markup=build_keyboard())

def build_graph(message):
    try:
        values, labels, title = message.text.split(';')
        values = [float(v) for v in values.split(',')]
        labels = labels.split(',')
        plt.clf()  # clear the current plot
        plt.bar(labels, values)
        plt.title(title)  # Set the title based on user input
        '''
        plt.xlabel('')
        plt.ylabel('')
        '''
        plt.savefig('bar_graph.png')  # save plot to image file
        with open('bar_graph.png', 'rb') as f:
            bot.send_photo(message.chat.id, f)  # send image as photo
        bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –≥—Ä–∞—Ñ–∏–∫?", reply_markup=build_keyboard())
    except:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=build_keyboard())

def build_pie_chart(message):
    try:
        values, labels, title = message.text.split(';')
        values = [float(v) for v in values.split(',')]
        labels = labels.split(',')
        plt.clf() # Clear the current figure
        plt.pie(values, labels=labels, autopct='%1.1f%%')
        plt.title(title)  # Set the title based on user input
        plt.savefig('pie_chart.png')  # save plot to image file
        with open('pie_chart.png', 'rb') as f:
            bot.send_photo(message.chat.id, f)  # send image as photo
        bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –≥—Ä–∞—Ñ–∏–∫?", reply_markup=build_keyboard())
    except:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=build_keyboard())

def build_line_graph(message):
    try:
        values, labels, title = message.text.split(';')
        values = [float(v) for v in values.split(',')]
        labels = labels.split(',')
        plt.clf() # Clear the current figure
        plt.plot(labels, values, marker='o')
        plt.title(title)  # Set the title based on user input
        plt.savefig('line_graph.png')  # save plot to image file
        with open('line_graph.png', 'rb') as f:
            bot.send_photo(message.chat.id, f)  # send image as photo
        bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –≥—Ä–∞—Ñ–∏–∫?", reply_markup=build_keyboard())
    except:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=build_keyboard())

def build_scatter(message):
    try:
        x_values, y_values, title = message.text.split(';')
        x_values = [float(v) for v in x_values.split(',')]
        y_values = [float(v) for v in y_values.split(',')]
        plt.clf() # Clear the current figure
        plt.scatter(x_values, y_values)
        plt.title(title)  # Set the title based on user input
        plt.xlabel('X-axis')
        plt.ylabel('Y-axis')
        plt.savefig('scatter_plot.png')  # save plot to image file
        with open('scatter_plot.png', 'rb') as f:
            bot.send_photo(message.chat.id, f)  # send image as photo
        bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –≥—Ä–∞—Ñ–∏–∫?", reply_markup=build_keyboard())
    except:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ—á–µ—á–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=build_keyboard())

if __name__ == '__main__':
     bot.infinity_polling()
